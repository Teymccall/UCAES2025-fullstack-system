rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Allow users to read and write their own application data
    match /admission-applications/{applicationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Allow authenticated users to create new applications
    match /admission-applications/{applicationId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Allow staff/admin/director to read all applications
    match /admission-applications/{applicationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin', 'director']);
    }
    
    // Allow staff/admin/director to update application status
    match /admission-applications/{applicationId} {
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin', 'director'];
    }
    
    // Firebase Admin SDK bypasses all rules, but we add explicit permissions for server requests
    // Note: Admin SDK requests will bypass these rules anyway
    
    // Student registrations collection - allow users to read and write their own data
    match /student-registrations/{registrationId} {
      allow read, write: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         request.auth.uid == request.resource.data.userId);
    }
    
    // Allow authenticated users to create new student registrations
    match /student-registrations/{registrationId} {
      allow create: if request.auth != null && 
        request.auth.uid == request.resource.data.userId;
    }
    
    // Allow staff/admin to read all student registrations
    match /student-registrations/{registrationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.userId || 
         get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin']);
    }
    
    // Allow staff/admin to update student registration status
    match /student-registrations/{registrationId} {
      allow update: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin'];
    }
    
    // Application counters for generating IDs
    match /application-counters/{counterId} {
      allow read, write: if request.auth != null;
    }
    
    // Registration counters for generating registration numbers
    match /registration-counters/{counterId} {
      allow read, write: if request.auth != null;
    }
    
    // Academic settings
    match /academic-settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin'];
    }
    
    // Academic years
    match /academic-years/{yearId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['staff', 'admin'];
    }
    
    // User profiles
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
  }
} 