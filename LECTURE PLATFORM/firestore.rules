rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions for role-based access control
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Super Admin";
    }
    
    function isLecturer() {
      return isAuthenticated() && (
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Lecturer" ||
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Super Admin"
      );
    }
    
    function isCourseLecturer(courseId) {
      return isLecturer() && 
        get(/databases/$(database)/documents/courses/$(courseId)).data.lecturerId == request.auth.uid;
    }
    
    // Base rule - deny by default
    match /{document=**} {
      allow read, write: if false;
    }
    
    // Users collection rules
    match /users/{userId} {
      // Users can read their own data
      allow read: if isAuthenticated() && request.auth.uid == userId;
      // Only admins can create/update/delete users
      allow write: if isAdmin();
    }
    
    // Courses collection rules
    match /courses/{courseId} {
      // All authenticated users can read course data
      allow read: if isAuthenticated();
      // Lecturers can update their own course details
      allow update: if isCourseLecturer(courseId) && 
                    (!("lecturerId" in request.resource.data) || 
                     request.resource.data.lecturerId == resource.data.lecturerId);
    }
    
    // Students collection rules
    match /students/{studentId} {
      // Lecturers can read student data for students in their courses
      allow read: if isLecturer();
    }
    
    // Grades collection rules
    match /grades/{gradeId} {
      // Lecturers can read all grades for their courses
      allow read: if isLecturer() && 
                  resource.data.lecturerId == request.auth.uid;
      
      // Lecturers can submit grades for their courses
      allow create: if isLecturer() && 
                    request.resource.data.lecturerId == request.auth.uid;
      
      // Lecturers can update grades they submitted if they're still pending
      allow update: if isLecturer() && 
                    resource.data.lecturerId == request.auth.uid &&
                    resource.data.status == "pending";
    }
    
    // Course Registration rules
    match /registrations/{registrationId} {
      // Lecturers can read registrations for their courses
      allow read: if isLecturer() && 
                  exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
                  get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.lecturerId == request.auth.uid;
    }
    
    // Announcements collection rules
    match /announcements/{announcementId} {
      // All authenticated users can read announcements
      allow read: if isAuthenticated();
      
      // Lecturers can create announcements
      allow create: if isLecturer() && 
                    request.resource.data.authorId == request.auth.uid;
      
      // Lecturers can update/delete their own announcements
      allow update, delete: if isLecturer() && 
                            resource.data.authorId == request.auth.uid;
    }
    
    // Audit logs collection rules
    match /auditLogs/{logId} {
      // Users can read their own audit logs
      allow read: if isAuthenticated() && 
                  resource.data.userId == request.auth.uid;
      
      // All users can create audit logs for their own actions
      allow create: if isAuthenticated() && 
                    request.resource.data.userId == request.auth.uid;
    }
    
    // Course materials collection rules
    match /courseMaterials/{materialId} {
      // All authenticated users can read course materials
      allow read: if isAuthenticated();
      
      // Lecturers can create/update/delete materials for their courses
      allow create: if isLecturer() && 
                    request.resource.data.lecturerId == request.auth.uid;
      
      allow update, delete: if isLecturer() && 
                            resource.data.lecturerId == request.auth.uid;
    }
    
    // Attendance collection rules
    match /attendance/{attendanceId} {
      // Lecturers can read attendance for their courses
      allow read: if isLecturer() && 
                  exists(/databases/$(database)/documents/courses/$(resource.data.courseId)) &&
                  get(/databases/$(database)/documents/courses/$(resource.data.courseId)).data.lecturerId == request.auth.uid;
      
      // Lecturers can create/update attendance for their courses
      allow create, update: if isLecturer() && 
                            exists(/databases/$(database)/documents/courses/$(request.resource.data.courseId)) &&
                            get(/databases/$(database)/documents/courses/$(request.resource.data.courseId)).data.lecturerId == request.auth.uid;
    }
  }
}