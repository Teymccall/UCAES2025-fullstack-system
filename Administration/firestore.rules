rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default - require authentication for all operations
    match /{document=**} {
      allow read, write: if false;  // Default deny, specific rules override this
    }
    
    // Students collection rules
    match /students/{studentId} {
      // Allow students, admin staff to read student records
      allow read: if request.auth != null;
      
      // Any authenticated user can write student records (more permissive)
      allow write: if request.auth != null;
    }
    
    // Users collection rules
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId || isAdmin()
      );
    }
    
    // Course Registration rules
    match /registrations/{registrationId} {
      // Anyone authenticated can read registrations
      allow read: if request.auth != null;
      
      // Staff and students can create/update registrations
      allow write: if request.auth != null;
    }
    
    // Grades collection rules
    match /grades/{gradeId} {
      // Anyone authenticated can read grades
      allow read: if request.auth != null;
      
      // Only authorized staff can write grades
      allow write: if request.auth != null && (
        isLecturer() || isAcademicOfficer() || isAdmin()
      );
    }
    
    // Course, Program, and other academic data
    match /courses/{courseId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAcademicOfficer() || isAdmin()
      );
    }
    
    match /programs/{programId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isAcademicOfficer() || isAdmin()
      );
    }
    
    // Fees data
    match /fees/{feeId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isRegistrar() || isAdmin()
      );
    }
    
    match /feeAccounts/{accountId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        isRegistrar() || isAdmin()
      );
    }
    
    // Settings
    match /settings/{settingId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Helper functions for role-based access
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Super Admin";
    }
    
    function isRegistrar() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Registrar" ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Super Admin"
        );
    }
    
    function isAcademicOfficer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Academic Officer" ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Super Admin"
        );
    }
    
    function isLecturer() {
      return isAuthenticated() && 
        exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
        (
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Lecturer" ||
          get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == "Super Admin"
        );
    }
  }
}